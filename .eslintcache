[{"C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\App.js":"1","C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\reportWebVitals.js":"2","C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\index.js":"3","C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\components\\Task\\index.jsx":"4","C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\utils\\idGenerator.js":"5","C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\components\\ErrorBoundary\\ErrorBoundary.jsx":"6","C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\components\\Confirm\\index.jsx":"7","C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\demo\\A.jsx":"8","C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\demo\\B.jsx":"9","C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\components\\TaskFormModal\\index.jsx":"10","C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\components\\pages\\Contacts\\index.jsx":"11","C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\components\\Input\\index.jsx":"12","C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\components\\TextArea\\index.jsx":"13","C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\utils\\validators.js":"14","C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\components\\pages\\Todo\\ToDo.jsx":"15","C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\store\\store.js":"16","C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\components\\Spinner\\index.jsx":"17","C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\demo\\Hooks.jsx":"18","C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\components\\pages\\Registration\\Registration.jsx":"19","C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\components\\pages\\Login\\Login.jsx":"20"},{"size":2168,"mtime":1617200271373,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":1606570561159,"results":"23","hashOfConfig":"22"},{"size":634,"mtime":1615038568520,"results":"24","hashOfConfig":"22"},{"size":2448,"mtime":1612871890495,"results":"25","hashOfConfig":"22"},{"size":91,"mtime":1611397903380,"results":"26","hashOfConfig":"22"},{"size":608,"mtime":1611660965775,"results":"27","hashOfConfig":"22"},{"size":976,"mtime":1612867506172,"results":"28","hashOfConfig":"22"},{"size":584,"mtime":1612009123824,"results":"29","hashOfConfig":"22"},{"size":468,"mtime":1612009307900,"results":"30","hashOfConfig":"22"},{"size":3156,"mtime":1612873542468,"results":"31","hashOfConfig":"22"},{"size":6241,"mtime":1613661024755,"results":"32","hashOfConfig":"22"},{"size":899,"mtime":1613661032408,"results":"33","hashOfConfig":"22"},{"size":846,"mtime":1613661041614,"results":"34","hashOfConfig":"22"},{"size":506,"mtime":1617199462831,"results":"35","hashOfConfig":"22"},{"size":10350,"mtime":1615038090971,"results":"36","hashOfConfig":"22"},{"size":2188,"mtime":1615036631871,"results":"37","hashOfConfig":"22"},{"size":214,"mtime":1615035151200,"results":"38","hashOfConfig":"22"},{"size":2097,"mtime":1615907606794,"results":"39","hashOfConfig":"22"},{"size":2851,"mtime":1617200175728,"results":"40","hashOfConfig":"22"},{"size":2629,"mtime":1617200292840,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fx59qy",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"59"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},"C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\App.js",[],"C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\reportWebVitals.js",[],"C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\index.js",[],["90","91"],"C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\components\\Task\\index.jsx",[],"C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\utils\\idGenerator.js",[],["92","93"],"C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\components\\ErrorBoundary\\ErrorBoundary.jsx",[],["94","95"],"C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\components\\Confirm\\index.jsx",[],["96","97"],"C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\demo\\A.jsx",[],"C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\demo\\B.jsx",[],"C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\components\\TaskFormModal\\index.jsx",[],"C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\components\\pages\\Contacts\\index.jsx",[],["98","99"],"C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\components\\Input\\index.jsx",[],"C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\components\\TextArea\\index.jsx",[],"C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\utils\\validators.js",[],"C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\components\\pages\\Todo\\ToDo.jsx",["100","101","102"],"import React from 'react';\r\nimport Task from '../../Task';\r\nimport { Container, Row, Col, Button } from 'react-bootstrap';\r\nimport Confirm from '../../Confirm';\r\nimport TaskFormModal from '../../TaskFormModal';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass ToDo extends React.Component {\r\n    state = {\r\n        tasks: [],\r\n        removeTasks: new Set(),\r\n        isChecked: false,\r\n        isConfirmWindowOpen: false,\r\n        editTask: null,\r\n        isAddTaskModalOpen: false\r\n    }\r\n    componentDidMount() {\r\n        this.props.setLoading();\r\n        fetch('http://localhost:300')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.error) {\r\n                    throw data.error;\r\n                }\r\n                this.props.setTasks(data);\r\n            })\r\n            .catch(error => {\r\n                this.props.setErrorMessage(error);\r\n            });\r\n    }\r\n    toggleOpenAddTaskModal = () => {\r\n        this.setState({\r\n            isAddTaskModalOpen: !this.state.isAddTaskModalOpen\r\n        })\r\n    }\r\n    handleSaveEditTask = (e, task) => {\r\n        if (!task.title) return false;\r\n        const body = {\r\n            ...task\r\n        }\r\n        delete body._id;\r\n        fetch('http://localhost:3001/task/' + task._id, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(body),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.error) {\r\n                    throw data.error;\r\n                }\r\n                const tasks = [...this.state.tasks];\r\n                const idx = tasks.findIndex(t => t._id === data._id);\r\n                tasks[idx] = data;\r\n                this.setState({\r\n                    editTask: null,\r\n                    tasks\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log('Error Add Task', error);\r\n            })\r\n\r\n    }\r\n    toggleOpenEditTaskModal = (task = null) => {\r\n        this.setState({\r\n            editTask: task\r\n        })\r\n    }\r\n    handleAddTask = (e, formData) => {\r\n        const { key, type } = e;\r\n        if (type === 'keypress' && !key === 'Enter') return;\r\n        if (formData.title === '' ||\r\n            formData.description === '' ||\r\n            formData.date === ''\r\n        ) return;\r\n        const { tasks } = this.state;\r\n        if (\r\n            (type === 'keypress' && key === 'Enter') ||\r\n            type === 'click'\r\n        ) {\r\n\r\n            fetch('http://localhost:3001/task', {\r\n                method: 'POST',\r\n                body: JSON.stringify(formData),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    if (data.error) {\r\n                        throw data.error;\r\n                    }\r\n                    const tasksCopy = [...tasks];\r\n                    tasksCopy.push(data);\r\n                    this.setState({\r\n                        isAddTaskModalOpen: false,\r\n                        tasks: tasksCopy,\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    console.log('Error Add Task', error);\r\n                })\r\n\r\n\r\n        } else {\r\n            return;\r\n        }\r\n\r\n    }\r\n    handleDeleteTask = (taskId) => {\r\n\r\n        fetch('http://localhost:3001/task/' + taskId, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.error) {\r\n                    throw data.error;\r\n                }\r\n                const { tasks } = this.state;\r\n                let tasksCopy = [...tasks];\r\n                tasksCopy = tasksCopy.filter(task => task._id !== taskId);\r\n                this.setState({\r\n                    tasks: tasksCopy\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log('Error Add Task', error);\r\n            })\r\n\r\n    }\r\n    toggleOpenConfirmWindow = () => {\r\n        this.setState({\r\n            isConfirmWindowOpen: !this.state.isConfirmWindowOpen\r\n        })\r\n    }\r\n\r\n    handleCheck = (taskId) => {\r\n        const removeTasks = new Set(this.state.removeTasks);\r\n        if (removeTasks.has(taskId))\r\n            removeTasks.delete(taskId);\r\n        else\r\n            removeTasks.add(taskId);\r\n\r\n        this.setState({\r\n            removeTasks\r\n        }, () => {\r\n            this.setIsChecked();\r\n        });\r\n    }\r\n    handleRemoveCheckedTasks = () => {\r\n        let tasks = [...this.state.tasks];\r\n        const removeTasks = this.state.removeTasks;\r\n        const body = {\r\n            tasks: [...removeTasks]\r\n        }\r\n        fetch('http://localhost:3001/task', {\r\n            method: 'PATCH',\r\n            body: JSON.stringify(body),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.error) {\r\n                    throw data.error;\r\n                }\r\n\r\n                tasks = tasks.filter(task => !removeTasks.has(task._id));\r\n                this.setState({\r\n                    tasks,\r\n                    removeTasks: new Set(),\r\n                    isConfirmWindowOpen: false,\r\n                    isChecked: false\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log('Error Add Task', error);\r\n            })\r\n\r\n    }\r\n    setIsChecked = () => {\r\n        this.setState({\r\n            isChecked: !!this.state.removeTasks.size\r\n        })\r\n    }\r\n    componentDidUpdate() {\r\n        if (this.props.taskActionFailed) {\r\n            this.props.clearTaskActionFailed();\r\n        }\r\n    }\r\n    render() {\r\n        const {\r\n            // tasks,\r\n            isChecked,\r\n            isConfirmWindowOpen,\r\n            removeTasks,\r\n            editTask,\r\n            isAddTaskModalOpen\r\n        } = this.state;\r\n\r\n        const {\r\n            tasks,\r\n            taskActionSuccess,\r\n            // loading,\r\n            taskActionFailed,\r\n            errorMessage,\r\n        } = this.props;\r\n\r\n\r\n        // if (errorMessage) {\r\n        //     toast.error(errorMessage);\r\n        //   }\r\n        const tasksJSX = tasks.map(task => {\r\n            return (\r\n                <Col\r\n                    key={task._id}\r\n                    xs={12}\r\n                    ms={6}\r\n                    md={4}\r\n                    className=\"mt-5\"\r\n\r\n                >\r\n                    <Task\r\n                        task={task}\r\n                        handleDeleteTask={this.handleDeleteTask}\r\n                        handleCheck={this.handleCheck}\r\n                        isChecked={isChecked}\r\n                        toggleChecked={this.toggleChecked}\r\n                        handleOpenEditTaskModal={this.toggleOpenEditTaskModal}\r\n                    />\r\n                </Col>\r\n            );\r\n        });\r\n        return (\r\n            <>\r\n                <Container>\r\n                    <Row className=\"justify-content-center mt-5\">\r\n                        <Col md={12} lg={10} xl={8}>\r\n                            <Button\r\n                                variant=\"primary\"\r\n                                onClick={this.toggleOpenAddTaskModal}\r\n                                disabled={removeTasks.size}\r\n                            >\r\n                                Add  New Task\r\n                            </Button>\r\n\r\n\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center mb-5\">\r\n                        {tasksJSX}\r\n                    </Row>\r\n\r\n                    <Row className=\"justify-content-center\">\r\n                        <Button\r\n                            variant=\"outline-danger\"\r\n                            disabled={!isChecked}\r\n                            onClick={this.toggleOpenConfirmWindow}\r\n                        >\r\n                            Remove Checked Tasks\r\n                    </Button>\r\n                    </Row>\r\n                </Container>\r\n                { isConfirmWindowOpen && (\r\n                    <Confirm\r\n                        toggleOpenConfirmWindow={this.toggleOpenConfirmWindow}\r\n                        handleRemoveCheckedTasks={this.handleRemoveCheckedTasks}\r\n                        removeTasksCount={removeTasks.size}\r\n                    />\r\n                )\r\n                }\r\n                {\r\n                    editTask && (\r\n                        <TaskFormModal\r\n                            onClose={this.toggleOpenEditTaskModal}\r\n                            editTask={editTask}\r\n                            onSave={this.handleSaveEditTask}\r\n                        />\r\n                    )\r\n                }\r\n\r\n                {\r\n                    isAddTaskModalOpen && <TaskFormModal\r\n                        onSave={this.handleAddTask}\r\n                        onClose={this.toggleOpenAddTaskModal}\r\n                    />\r\n                }\r\n\r\n              \r\n\r\n\r\n\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tasks: state.tasks,\r\n        taskActionSuccess: state.taskActionSuccess,\r\n        loading: state.loading,\r\n        taskActionFailed: state.taskActionFailed,\r\n        errorMessage: state.errorMessage\r\n    }\r\n\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setLoading: () => dispatch({ type: \"LOADING\" }),\r\n        setErrorMessage: (errorMessage) => dispatch({ type: \"SET_ERROR_MESSAGE\", errorMessage }),\r\n        setTasks: (tasks) => dispatch({ type: \"SET_TASKS\", tasks }),\r\n        addTask: (task) => dispatch({ type: \"ADD_TASK\", task }),\r\n        deleteTask: (_id) => dispatch({ type: \"DELETE_TASK\", _id }),\r\n        editTask: (task) => dispatch({ type: \"EDIT_TASK\", task }),\r\n        clearTaskActionFailed: () => dispatch({ type: \"CLEAR_TASK_ACTION_FAILED\" })\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ToDo)","C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\store\\store.js",[],"C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\components\\Spinner\\index.jsx",[],"C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\demo\\Hooks.jsx",["103","104"],"import { useState, useCallback, useMemo, useEffect } from 'react';\r\n\r\n\r\n//UseMemo\r\n// function createUser(name, surname) {\r\n//     console.log(\"user function call\");\r\n//     return {\r\n//         name,\r\n//         surname\r\n//     }\r\n// }\r\n// const Hooks = (props) => {\r\n//     const [name, setName] = useState(\"\");\r\n//     const [surname, setSurname] = useState(\"\");\r\n\r\n//     const [counter, setCounter] = useState(0);\r\n\r\n//     const user = useMemo(()=> createUser(name, surname), [name, surname]);\r\n// return (\r\n//     <div>\r\n//         <h1>Hooks Component</h1>\r\n//         <div>\r\n//             <button onClick={() => setCounter(counter + 1)}>Click to Pluse Count{counter}</button>\r\n//             <br />\r\n//             <br />\r\n//             <br />\r\n//             <br />\r\n//             <br />\r\n//             <input\r\n//                 type=\"text\"\r\n//                 name=\"name\"\r\n//                 onChange={(e) => setName(e.target.value)}\r\n//                 value={name}\r\n//             />\r\n//             <br />\r\n//             <input\r\n//                 type=\"text\"\r\n//                 name=\"surname\"\r\n//                 onChange={(e) => setSurname(e.target.value)}\r\n//                 value={surname}\r\n//             />\r\n//             <br />\r\n//             <br />\r\n//             <br />\r\n//             <br />\r\n//             <pre>\r\n//                 {\r\n//                     JSON.stringify(user, null, 2)\r\n//                 }\r\n//             </pre>\r\n//         </div>\r\n//     </div>\r\n// );\r\n// };\r\n\r\n\r\n\r\n\r\n\r\nconst Hooks = (props) => {\r\n\r\n\r\n    const [counter, setCounter] = useState(0);\r\n    const [message, setMessage] = useState(\"Hello\");\r\n\r\n    const sayHello = useCallback((text) => {\r\n        console.log(text);\r\n    }, []);\r\n    useEffect(() => {\r\n        sayHello(message);\r\n    }, [sayHello, message]);\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Hooks Component</h1>\r\n            <div>\r\n                <button onClick={() => setCounter(counter + 1)}>Click to Pluse Count{counter}</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default Hooks;","C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\components\\pages\\Registration\\Registration.jsx",["105"],"C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\components\\pages\\Login\\Login.jsx",["106"],"import { useState, useEffect, useCallback } from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { isRequired } from '../../../utils/validators';\r\n\r\nconst inputs = [\r\n\r\n    {\r\n        type: \"email\",\r\n        name: \"email\",\r\n        placeholder: \"Email\",\r\n    },\r\n    {\r\n        type: \"password\",\r\n        name: \"password\",\r\n        placeholder: \"Password\",\r\n    }\r\n\r\n]\r\nconst Login = (props) => {\r\n    const [formData, setFormData] = useState({\r\n        name: \"\",\r\n        surname: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\"\r\n    });\r\n    const [errors, setError] = useState({\r\n        name: null,\r\n        surname: null,\r\n        email: null,\r\n        password: null,\r\n        confirmPassword: null\r\n    });\r\n    const handleChange = useCallback((e) => {\r\n        const { value, name } = e.target;\r\n        let error = isRequired(value) || null;\r\n        if (error) {\r\n            setError({\r\n                ...errors,\r\n                [name]: error\r\n            });\r\n        }\r\n        setFormData({\r\n            ...formData,\r\n            [name]: value\r\n        });\r\n    }, [setFormData, formData, setError, errors]);\r\n\r\n    const handleSubmit = () => {\r\n\r\n        console.log(\"formData\", formData);\r\n        // fetch('http://localhost:3001/user', {\r\n        //     method: 'POST',\r\n        //     headers: {\r\n        //         'Content-Type': 'application/json'\r\n        //     },\r\n        //     body: JSON.stringify(formData)\r\n\r\n        // })\r\n        //     .then(response => response.json())\r\n        //     .then(data => {\r\n        //         if (data.error) {\r\n        //             throw data.error;\r\n        //         }\r\n        //         props.history.push(\"/login\");\r\n\r\n        //     })\r\n        //     .catch(error => {\r\n        //         console.log('Error Add Task', error);\r\n        //     })\r\n    }\r\n    const inputsJsx = inputs.map((input, index) => {\r\n        return (\r\n            <Form.Group key={index}>\r\n                <Form.Control\r\n                    {...input}\r\n                    onChange={handleChange}\r\n                    value={formData[input.name]}\r\n                />\r\n                <Form.Text style={{ color: \"red\", fontSize: \"12px\" }}>{errors[input.name]}</Form.Text>\r\n            </Form.Group>\r\n        );\r\n    });\r\n    return (\r\n        <Form\r\n            onSubmit={(e) => e.preventDefault()}\r\n            style={{ width: \"300px\", margin: \"0 auto\" }}\r\n            className=\"mt-5\"\r\n        >\r\n            {inputsJsx}\r\n            <Button onClick={handleSubmit}>Login</Button>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default Login;",{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"107","replacedBy":"111"},{"ruleId":"109","replacedBy":"112"},{"ruleId":"107","replacedBy":"113"},{"ruleId":"109","replacedBy":"114"},{"ruleId":"107","replacedBy":"115"},{"ruleId":"109","replacedBy":"116"},{"ruleId":"107","replacedBy":"117"},{"ruleId":"109","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":213,"column":13,"nodeType":"121","messageId":"122","endLine":213,"endColumn":30},{"ruleId":"119","severity":1,"message":"123","line":215,"column":13,"nodeType":"121","messageId":"122","endLine":215,"endColumn":29},{"ruleId":"119","severity":1,"message":"124","line":216,"column":13,"nodeType":"121","messageId":"122","endLine":216,"endColumn":25},{"ruleId":"119","severity":1,"message":"125","line":1,"column":33,"nodeType":"121","messageId":"122","endLine":1,"endColumn":40},{"ruleId":"119","severity":1,"message":"126","line":64,"column":21,"nodeType":"121","messageId":"122","endLine":64,"endColumn":31},{"ruleId":"119","severity":1,"message":"127","line":1,"column":20,"nodeType":"121","messageId":"122","endLine":1,"endColumn":29},{"ruleId":"119","severity":1,"message":"127","line":1,"column":20,"nodeType":"121","messageId":"122","endLine":1,"endColumn":29},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],["128"],["129"],["128"],["129"],["128"],["129"],["128"],["129"],"no-unused-vars","'taskActionSuccess' is assigned a value but never used.","Identifier","unusedVar","'taskActionFailed' is assigned a value but never used.","'errorMessage' is assigned a value but never used.","'useMemo' is defined but never used.","'setMessage' is assigned a value but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]