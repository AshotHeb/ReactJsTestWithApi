[{"C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\App.js":"1","C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\reportWebVitals.js":"2","C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\index.js":"3","C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\components\\Task\\index.jsx":"4","C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\utils\\idGenerator.js":"5","C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\components\\Todo\\ToDo.jsx":"6","C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\components\\ErrorBoundary\\ErrorBoundary.jsx":"7"},{"size":289,"mtime":1611660626902,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1606570561159,"results":"10","hashOfConfig":"9"},{"size":547,"mtime":1611397381559,"results":"11","hashOfConfig":"9"},{"size":2083,"mtime":1611660420771,"results":"12","hashOfConfig":"9"},{"size":91,"mtime":1611397903380,"results":"13","hashOfConfig":"9"},{"size":6081,"mtime":1611660722698,"results":"14","hashOfConfig":"9"},{"size":608,"mtime":1611660965775,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"n0sqx8",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\App.js",[],"C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\reportWebVitals.js",[],["33","34"],"C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\index.js",[],["35","36"],"C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\components\\Task\\index.jsx",[],"C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\utils\\idGenerator.js",[],"C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\components\\Todo\\ToDo.jsx",["37"],"import React from 'react';\r\nimport styles from './task.module.css';\r\nimport Task from '../Task';\r\nimport idGenerator from '../../utils/idGenerator';\r\nimport { Container, Row, Col, InputGroup, FormControl, Button } from 'react-bootstrap';\r\n\r\n\r\nclass ToDo extends React.Component {\r\n    state = {\r\n        tasks: [\r\n            {\r\n                _id: idGenerator(),\r\n                text: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\r\n            },\r\n            {\r\n                _id: idGenerator(),\r\n                text: 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'\r\n            },\r\n            {\r\n                _id: idGenerator(),\r\n                text: 'ccccccccccccccccccccccccccccccc'\r\n            },\r\n            {\r\n                _id: idGenerator(),\r\n                text: 'ddddddddddddddddddddddddddd'\r\n            },\r\n            {\r\n                _id: idGenerator(),\r\n                text: 'eeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\r\n            },\r\n            {\r\n                _id: idGenerator(),\r\n                text: 'ffffffffffffffffffffffffff'\r\n            }\r\n        ],\r\n        inputValue: '',\r\n        removeTasks: new Set(),\r\n        isChecked: false\r\n    }\r\n    handleChange = (e) => {\r\n        const { value } = e.target;\r\n        this.setState({\r\n            inputValue: value\r\n        })\r\n    }\r\n    handleAddTask =  ({ type, key })  =>{\r\n     \r\n        const { inputValue, tasks } = this.state;\r\n        if (type === 'keydown' && !key === 'Enter') return;\r\n        if (!inputValue) return;\r\n\r\n        if (\r\n            (type === 'keydown' && key === 'Enter') ||\r\n            type === 'click'\r\n        ) {\r\n\r\n            const tasksCopy = [...tasks];\r\n            tasksCopy.push({\r\n                _id: idGenerator(),\r\n                text: inputValue\r\n            })\r\n            this.setState({\r\n                tasks: tasksCopy,\r\n                inputValue: ''\r\n            })\r\n        } else {\r\n            return;\r\n        }\r\n\r\n    }\r\n    handleDeleteTask = (taskId) => {\r\n        const { tasks } = this.state;\r\n        let tasksCopy = [...tasks];\r\n        tasksCopy = tasksCopy.filter(task => task._id !== taskId);\r\n        this.setState({\r\n            tasks: tasksCopy\r\n        });\r\n    }\r\n    // handleKeyDown = (e) => {\r\n    // enter ov avelacnel task\r\n    //     const { inputValue, tasks } = this.state;\r\n    //     const { key } = e;\r\n    //     if (key !== 'Enter') return;\r\n    //     const tasksCopy = [...tasks];\r\n    //     tasksCopy.push({\r\n    //         _id: idGenerator(),\r\n    //         text: inputValue\r\n    //     })\r\n    //     this.setState({\r\n    //         tasks: tasksCopy,\r\n    //         inputValue: ''\r\n    //     })\r\n\r\n    // }\r\n\r\n    handleCheck = (taskId) => {\r\n        const removeTasks = new Set(this.state.removeTasks);\r\n        if (removeTasks.has(taskId))\r\n            removeTasks.delete(taskId);\r\n        else\r\n            removeTasks.add(taskId);\r\n\r\n        this.setState({\r\n            removeTasks\r\n        }, () => {\r\n            this.setIsChecked();\r\n        });\r\n    }\r\n    handleRemoveCheckedTasks = () => {\r\n        let tasks = [...this.state.tasks];\r\n        const removeTasks = this.state.removeTasks;\r\n        tasks = tasks.filter(task => !removeTasks.has(task._id));\r\n        this.setState({\r\n            tasks,\r\n            removeTasks: new Set()\r\n        });\r\n    }\r\n    setIsChecked = () => {\r\n        console.log(this.state.removeTasks.size)\r\n        this.setState({\r\n            isChecked: !!this.state.removeTasks.size\r\n        })\r\n    }\r\n    render() {\r\n        if(Math.random() > 0.5){\r\n            throw new Error('The number is big from 0.5');\r\n        }\r\n        const { inputValue, tasks, isChecked } = this.state\r\n        const tasksJSX = tasks.map(task => {\r\n            return (\r\n                <Col\r\n                    key={task._id}\r\n                    xs={12}\r\n                    ms={6}\r\n                    md={4}\r\n                    className=\"mt-5\"\r\n\r\n                >\r\n                    <Task\r\n                        task={task}\r\n                        handleDeleteTask={this.handleDeleteTask}\r\n                        handleCheck={this.handleCheck}\r\n                        isChecked={isChecked}\r\n                        toggleChecked={this.toggleChecked}\r\n                    />\r\n                </Col>\r\n            )\r\n        })\r\n        return (\r\n            <Container>\r\n                <Row className=\"justify-content-center\">\r\n                    <Col md={12} lg={10} xl={8}>\r\n                        <InputGroup className=\"mb-3\">\r\n                            <FormControl\r\n                                type=\"text\"\r\n                                onChange={this.handleChange}\r\n                                value={inputValue}\r\n                                placeholder=\"New Tast\"\r\n                                onKeyDown={this.handleAddTask}\r\n                                disabled={!!isChecked}\r\n                            />\r\n                            <InputGroup.Append>\r\n                                <Button variant=\"outline-primary\"\r\n                                    type=\"button\"\r\n                                    value=\"Add Task\"\r\n                                    onClick={this.handleAddTask}\r\n                                    disabled={!inputValue ||  !!isChecked}\r\n                                >\r\n                                    Button\r\n                                </Button>\r\n                            </InputGroup.Append>\r\n                        </InputGroup>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"justify-content-center\">\r\n                    {tasksJSX}\r\n                </Row>\r\n\r\n                <Row className=\"justify-content-center\">\r\n                    <Button\r\n                        variant=\"outline-danger\"\r\n                        onClick={this.handleRemoveCheckedTasks}\r\n                    >\r\n                        Remove Checked Tasks\r\n                    </Button>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToDo","C:\\Users\\Ashot\\Desktop\\ProjectReact\\views\\src\\components\\ErrorBoundary\\ErrorBoundary.jsx",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"38","replacedBy":"42"},{"ruleId":"40","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":2,"column":8,"nodeType":"46","messageId":"47","endLine":2,"endColumn":14},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],["48"],["49"],"no-unused-vars","'styles' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]